(ns karabiner-configurator.keys-symbols-test
  (:require [clojure.test                        :as t]
            [karabiner-configurator.rules        :as rules]
            [karabiner-configurator.keys-symbols :as sut]))

;; convert symbols
(def symbol-map {
  :‚áßk   	:!SSk,
  :‚Äπ‚áßk  	:!Sk,
  :‚áß‚Ä∫k  	:!Rk,
  :‚éák   	:!OOk,
  :‚Äπ‚åòk  	:!Ck,
  :‚éá‚áßb  	:!OO!SSb,
  :‚Äπ‚éà##3	:!T##3
  :üåê    	:!F
})

;; convert modifiers
(def modi-map {
  :!OO!SSb     	:!OOSSb,
  :!CC!TT      	:!CCTT,
  :!CC!AA#BB!TT	:!CCAATT#BB,
  :!!##i       	:!!##i,
  :!CC!TT#CC#TT :!CCTT#CCTT
})


;; convert keys with modifiers
(def key-modi-map {
  :‚áß‚Ä∫1              	:!R1
  :‚éàsemicolon       	:!TTsemicolon
  :‚éàquote           	:!TTquote
  :‚éàspacebar        	:!TTspacebar
  :‚óÜ‚Ä∫z              	:!Qz
  :‚óÜ‚Ä∫period         	:!Qperiod
  :‚íªnon_us_backslash	:!Fnon_us_backslash
  :‚Äπ‚óÜd              	:!Cd
  :‚áß‚Äπ‚óÜf10           	:!SSCf10
  :‚éá‚Ä∫‚áß              	:!Eshift
  :‚éá‚Ä∫‚á™              	:!Ecaps_lock
  :‚áß‚ÅÑ               	:!SSslash
  :‚áß„Äî               	:!SSopen_bracket
  :‚áß„Äê               	:!SSopen_bracket
  :‚áß„Äå               	:!SSopen_bracket
  :‚áß‚Äê               	:!SShyphen
  :‚áßÔπ®               	:!SSnon_us_backslash
  :‚áß‚ßµ               	:!SSbackslash
  :‚áßÔºº               	:!SSbackslash
  ; more complicated cases in vertically aligned pairs
  [:w {:set ["‚ê†w" 1]  :repeat false} [:!‚ê†w       ]] ; skip conversion of variable values
  [:w {:set ["‚ê†w" 1], :repeat false} [:!spacebarw]]
  [:‚ÅÑ     [:say_‚ê†h :repeat false]] ; skip conversion of user functions with _escaped symbols
  [:slash [:say_‚ê†h :repeat false]]
})

;; convert keys as strings
(def key-string-map {
  "‚Äò  	 ‚áß 	  	 	k"	:!SSk,
  "‚Äò  	‚Äπ‚áß 	  	 	k"	:!Sk,
  "‚Äò  	 ‚áß‚Ä∫	  	 	k"	:!Rk,
  "‚Äò  	   	  	‚éá	k"	:!OOk,
  "‚Äò  	   	‚Äπ‚åò	 	k"	:!Ck,
  "‚Äò  	 ‚áß 	  	‚éá	k"	:!SSOOk,
  "‚Äò‚Äπ‚éà	   	  	 	k"	:!Tk
})

;; convert map of keys with modifiers
(def map-key-modi-map {
  {:key :‚éà‚Ä∫a, :halt true}   	{:key :!Wa, :halt true}
  {:sim[:‚Çå :‚êà]}             	{:sim [:equal_sign :delete_or_backspace]},
  {:sim[:‚Çå :‚êà] :modi :any}  	{:sim [:equal_sign :delete_or_backspace] :modi :any}
  {:sim["‚Äò‚Çå" :‚êà] :modi :any}	{:sim [:equal_sign :delete_or_backspace] :modi :any}
})

(t/deftest convert-symbols
  (t/testing "convert symbols"
    (doseq [[k v] symbol-map]
      (t/is (= (sut/key-name-sub-or-self k) v))))

  (t/testing "move mandatory/optional prefix from individual modifiers to a group"
    (doseq [[k v] modi-map]
      (t/is (= (sut/move-modi-prefix-front k) v))))

  (t/testing "convert key with symbol modifiers to regular keys"
    (doseq [[k v] key-modi-map]
      (t/is (= (sut/key-sym-to-key k) v))))

  (t/testing "convert map with :key with symbol modifiers to regular keys"
    (doseq [[k v] map-key-modi-map]
      (t/is (= (sut/key-sym-to-key k) v))))

  (t/testing "convert map with 'keys as strings'"
    (doseq [[k v] key-string-map]
      (t/is (= (sut/key-sym-to-key k) v))))
  )
